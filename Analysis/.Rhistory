update_model <- function(predictor_list, row_index, df) {
predictor_list = predictor_list[-(row_index)]
entire_model = reformulate(termlabels = predictor_list, response = 'Y')
lm_model_new = lm(entire_model, data = df)
return(lm_model_new)
}
update_pred_list <- function(predictor_list, row_index) {
predictor_list_new = predictor_list[-(row_index-1)]
return(predictor_list_new)
}
test = msan601backwardStepwise(df)
test
str(data)
msan601backwardStepwise(df)
library(alr4)
library(car)
data = Rateprof
#drop certain data
drops = c("gender", "pepper", "discipline", "dept")
data = data[,!(names(data) %in% drops)]
lm_rate = lm(numYears ~ ., data = data)
#installing library for power set
#install.packages("rje")
#library("rje")
msan601backwardStepwise <- function(dataframe) {
#rename all columnnames to specifically use for this function
#first copy original df
df = dataframe
#rename all columns appropriately to Y X1 X2 ...
colnames(df)[1] = 'Y'
for (i in 1:(length(df)-1)) {
colnames(df)[i+1] = paste0('X',i)
}
predictor_list = c()
for (i in 1:(length(df)-1)) {
predictor_list = c(predictor_list, paste0('X',i))
}
#   #This is a p-value criteria, not used
#   model = lm(Y~., data = df)
#   pvalues = lm_pvalues(model)
#   #getting rid of insignificant coefficients in the model with p = 0.10
#   #just to get rid of ones with large p-values.
#   #find the row with the max pvalue
#   while(pvalues[which.max(as.matrix(pvalues)),] > 0.10) {
#     row_index = which.max(as.matrix(pvalues))
#     if (pvalues[row_index,] > 0.10) {
#       model = update_model(predictor_list, row_index, df)
#       pvalues = lm_pvalues(model)
#       predictor_list = update_pred_list(predictor_list, row_index)
#     }
#   }
#FIRST criteria
#AIC method
#   n = length(df$Y)
#   model = lm(Y~., data = df)
#   SSE_p = anova(model)["Sum Sq"]["Residuals",]
#   p = length(anova(model)["Sum Sq"]$"Sum Sq")-1
#   AIC_0 = n*log(SSE_p) - n*log(n) + 2*p
#   AIC_list1 = AIC_list_vardrop(predictor_list, df)
#   AIC_1 = min(AIC_list1)
#   while (AIC_1 < AIC_0) {
#     AIC_0 = get_AIC(model, df)
#     AIC_list1 = AIC_list_vardrop(predictor_list, df)
#     #get new/updated predictor list
#     predictor_list = new_predictor_list(predictor_list, AIC_list1)
#     #get new/updated model
#     model = lm(reformulate(termlabels = predictor_list, response = 'Y'), data = df)
#     AIC_1 = min(AIC_list1)
#     print(AIC_1)
#   }
#SECOND criteria
#BIC method
n = length(df$Y)
model = lm(Y~., data = df)
SSE_p = anova(model)["Sum Sq"]["Residuals",]
p = length(anova(model)["Sum Sq"]$"Sum Sq")-1
BIC_0 = n*log(SSE_p) - n*log(n) + p*log(n)
BIC_list1 = BIC_list_vardrop(predictor_list, df)
BIC_1 = min(BIC_list1)
while (BIC_1 < BIC_0) {
BIC_0 = get_BIC(model, df)
BIC_list1 = BIC_list_vardrop(predictor_list, df)
#get new/updated predictor list
predictor_list = new_predictor_list(predictor_list, BIC_list1)
#get new/updated model
model = lm(reformulate(termlabels = predictor_list, response = 'Y'), data = df)
BIC_1 = min(BIC_list1)
print(BIC_1)
}
return(model)
}
AIC_list_vardrop <- function(predictor_list, df) {
num_vars = length(predictor_list)
AIC_list = c()
for (i in 1:num_vars) {
predictor_list_tmp = predictor_list[-i]
entire_model = reformulate(termlabels = predictor_list_tmp, response = 'Y')
lm_model_tmp = lm(entire_model, data = df)
AIC = get_AIC(lm_model_tmp, df)
AIC_list = c(AIC_list, AIC)
}
return(AIC_list)
}
BIC_list_vardrop <- function(predictor_list, df) {
num_vars = length(predictor_list)
BIC_list = c()
for (i in 1:num_vars) {
predictor_list_tmp = predictor_list[-i]
entire_model = reformulate(termlabels = predictor_list_tmp, response = 'Y')
lm_model_tmp = lm(entire_model, data = df)
BIC = get_BIC(lm_model_tmp, df)
BIC_list = c(BIC_list, BIC)
}
return(BIC_list)
}
new_predictor_list <- function(predictor_list, AIC_list) {
min_index = which.min(AIC_list)
pred_list_new = predictor_list[-min_index]
return(pred_list_new)
}
get_n <- function(df) {
n = length(df$Y)
return(n)
}
get_AIC <- function(model, df) {
n = get_n(df)
p = get_p(model)
SSE_p = get_SSEp(model)
AIC = n*log(SSE_p) - n*log(n) + 2*p
return(AIC)
}
get_BIC <- function(model, df) {
n = get_n(df)
p = get_p(model)
SSE_p = get_SSEp(model)
BIC = n*log(SSE_p) - n*log(n) + p*log(n)
return(BIC)
}
get_p <- function(model) {
p = length(anova(model)["Sum Sq"]$"Sum Sq")-1
return(p)
}
get_SSEp <- function(model) {
SSE_p = anova(model)["Sum Sq"]["Residuals",]
return(SSE_p)
}
lm_pvalues <- function(lm_model) {
summary_model_coeff = summary(lm_model)$coefficients
pvalues = as.data.frame(summary_model_coeff[,4])
return(pvalues)
}
update_model <- function(predictor_list, row_index, df) {
predictor_list = predictor_list[-(row_index)]
entire_model = reformulate(termlabels = predictor_list, response = 'Y')
lm_model_new = lm(entire_model, data = df)
return(lm_model_new)
}
update_pred_list <- function(predictor_list, row_index) {
predictor_list_new = predictor_list[-(row_index-1)]
return(predictor_list_new)
}
msan601backwardStepwise(df)
library(alr4)
library(car)
data = Rateprof
#drop certain data
drops = c("gender", "pepper", "discipline", "dept")
data = data[,!(names(data) %in% drops)]
lm_rate = lm(numYears ~ ., data = data)
#installing library for power set
#install.packages("rje")
#library("rje")
msan601backwardStepwise <- function(dataframe) {
#rename all columnnames to specifically use for this function
#first copy original df
df = dataframe
#rename all columns appropriately to Y X1 X2 ...
colnames(df)[1] = 'Y'
for (i in 1:(length(df)-1)) {
colnames(df)[i+1] = paste0('X',i)
}
predictor_list = c()
for (i in 1:(length(df)-1)) {
predictor_list = c(predictor_list, paste0('X',i))
}
#   #This is a p-value criteria, not used
#   model = lm(Y~., data = df)
#   pvalues = lm_pvalues(model)
#   #getting rid of insignificant coefficients in the model with p = 0.10
#   #just to get rid of ones with large p-values.
#   #find the row with the max pvalue
#   while(pvalues[which.max(as.matrix(pvalues)),] > 0.10) {
#     row_index = which.max(as.matrix(pvalues))
#     if (pvalues[row_index,] > 0.10) {
#       model = update_model(predictor_list, row_index, df)
#       pvalues = lm_pvalues(model)
#       predictor_list = update_pred_list(predictor_list, row_index)
#     }
#   }
#FIRST criteria
#AIC method
#   n = length(df$Y)
#   model = lm(Y~., data = df)
#   SSE_p = anova(model)["Sum Sq"]["Residuals",]
#   p = length(anova(model)["Sum Sq"]$"Sum Sq")-1
#   AIC_0 = n*log(SSE_p) - n*log(n) + 2*p
#   AIC_list1 = AIC_list_vardrop(predictor_list, df)
#   AIC_1 = min(AIC_list1)
#   while (AIC_1 < AIC_0) {
#     AIC_0 = get_AIC(model, df)
#     AIC_list1 = AIC_list_vardrop(predictor_list, df)
#     #get new/updated predictor list
#     predictor_list = new_predictor_list(predictor_list, AIC_list1)
#     #get new/updated model
#     model = lm(reformulate(termlabels = predictor_list, response = 'Y'), data = df)
#     AIC_1 = min(AIC_list1)
#     print(AIC_1)
#   }
#SECOND criteria
#BIC method
n = length(df$Y)
model = lm(Y~., data = df)
SSE_p = anova(model)["Sum Sq"]["Residuals",]
p = length(anova(model)["Sum Sq"]$"Sum Sq")-1
BIC_0 = n*log(SSE_p) - n*log(n) + p*log(n)
BIC_list1 = BIC_list_vardrop(predictor_list, df)
BIC_1 = min(BIC_list1)
while (BIC_1 < BIC_0) {
BIC_0 = get_BIC(model, df)
BIC_list1 = BIC_list_vardrop(predictor_list, df)
#get new/updated predictor list
model1 = model
predictor_list = new_predictor_list(predictor_list, BIC_list1)
#get new/updated model
model = lm(reformulate(termlabels = predictor_list, response = 'Y'), data = df)
BIC_1 = min(BIC_list1)
print(BIC_1)
}
return(model1)
}
AIC_list_vardrop <- function(predictor_list, df) {
num_vars = length(predictor_list)
AIC_list = c()
for (i in 1:num_vars) {
predictor_list_tmp = predictor_list[-i]
entire_model = reformulate(termlabels = predictor_list_tmp, response = 'Y')
lm_model_tmp = lm(entire_model, data = df)
AIC = get_AIC(lm_model_tmp, df)
AIC_list = c(AIC_list, AIC)
}
return(AIC_list)
}
BIC_list_vardrop <- function(predictor_list, df) {
num_vars = length(predictor_list)
BIC_list = c()
for (i in 1:num_vars) {
predictor_list_tmp = predictor_list[-i]
entire_model = reformulate(termlabels = predictor_list_tmp, response = 'Y')
lm_model_tmp = lm(entire_model, data = df)
BIC = get_BIC(lm_model_tmp, df)
BIC_list = c(BIC_list, BIC)
}
return(BIC_list)
}
new_predictor_list <- function(predictor_list, AIC_list) {
min_index = which.min(AIC_list)
pred_list_new = predictor_list[-min_index]
return(pred_list_new)
}
get_n <- function(df) {
n = length(df$Y)
return(n)
}
get_AIC <- function(model, df) {
n = get_n(df)
p = get_p(model)
SSE_p = get_SSEp(model)
AIC = n*log(SSE_p) - n*log(n) + 2*p
return(AIC)
}
get_BIC <- function(model, df) {
n = get_n(df)
p = get_p(model)
SSE_p = get_SSEp(model)
BIC = n*log(SSE_p) - n*log(n) + p*log(n)
return(BIC)
}
get_p <- function(model) {
p = length(anova(model)["Sum Sq"]$"Sum Sq")-1
return(p)
}
get_SSEp <- function(model) {
SSE_p = anova(model)["Sum Sq"]["Residuals",]
return(SSE_p)
}
lm_pvalues <- function(lm_model) {
summary_model_coeff = summary(lm_model)$coefficients
pvalues = as.data.frame(summary_model_coeff[,4])
return(pvalues)
}
update_model <- function(predictor_list, row_index, df) {
predictor_list = predictor_list[-(row_index)]
entire_model = reformulate(termlabels = predictor_list, response = 'Y')
lm_model_new = lm(entire_model, data = df)
return(lm_model_new)
}
update_pred_list <- function(predictor_list, row_index) {
predictor_list_new = predictor_list[-(row_index-1)]
return(predictor_list_new)
}
msan601backwardStepwise(df)
library(alr4)
library(car)
data = Rateprof
#drop certain data
drops = c("gender", "pepper", "discipline", "dept")
data = data[,!(names(data) %in% drops)]
lm_rate = lm(numYears ~ ., data = data)
#installing library for power set
#install.packages("rje")
#library("rje")
msan601backwardStepwise <- function(dataframe) {
#rename all columnnames to specifically use for this function
#first copy original df
df = dataframe
#rename all columns appropriately to Y X1 X2 ...
colnames(df)[1] = 'Y'
for (i in 1:(length(df)-1)) {
colnames(df)[i+1] = paste0('X',i)
}
predictor_list = c()
for (i in 1:(length(df)-1)) {
predictor_list = c(predictor_list, paste0('X',i))
}
#   #This is a p-value criteria, not used
#   model = lm(Y~., data = df)
#   pvalues = lm_pvalues(model)
#   #getting rid of insignificant coefficients in the model with p = 0.10
#   #just to get rid of ones with large p-values.
#   #find the row with the max pvalue
#   while(pvalues[which.max(as.matrix(pvalues)),] > 0.10) {
#     row_index = which.max(as.matrix(pvalues))
#     if (pvalues[row_index,] > 0.10) {
#       model = update_model(predictor_list, row_index, df)
#       pvalues = lm_pvalues(model)
#       predictor_list = update_pred_list(predictor_list, row_index)
#     }
#   }
#FIRST criteria
#AIC method
n = length(df$Y)
model = lm(Y~., data = df)
SSE_p = anova(model)["Sum Sq"]["Residuals",]
p = length(anova(model)["Sum Sq"]$"Sum Sq")-1
AIC_0 = n*log(SSE_p) - n*log(n) + 2*p
AIC_list1 = AIC_list_vardrop(predictor_list, df)
AIC_1 = min(AIC_list1)
while (AIC_1 < AIC_0) {
AIC_0 = get_AIC(model, df)
AIC_list1 = AIC_list_vardrop(predictor_list, df)
#get new/updated predictor list
model1 = model
predictor_list = new_predictor_list(predictor_list, AIC_list1)
#get new/updated model
model = lm(reformulate(termlabels = predictor_list, response = 'Y'), data = df)
AIC_1 = min(AIC_list1)
print(AIC_1)
}
#SECOND criteria
#BIC method
#   n = length(df$Y)
#   model = lm(Y~., data = df)
#   SSE_p = anova(model)["Sum Sq"]["Residuals",]
#   p = length(anova(model)["Sum Sq"]$"Sum Sq")-1
#   BIC_0 = n*log(SSE_p) - n*log(n) + p*log(n)
#   BIC_list1 = BIC_list_vardrop(predictor_list, df)
#   BIC_1 = min(BIC_list1)
#   while (BIC_1 < BIC_0) {
#     BIC_0 = get_BIC(model, df)
#     BIC_list1 = BIC_list_vardrop(predictor_list, df)
#     #get new/updated predictor list
#     model1 = model
#     predictor_list = new_predictor_list(predictor_list, BIC_list1)
#     #get new/updated model
#     model = lm(reformulate(termlabels = predictor_list, response = 'Y'), data = df)
#     BIC_1 = min(BIC_list1)
#     print(BIC_1)
#   }
return(model1)
}
AIC_list_vardrop <- function(predictor_list, df) {
num_vars = length(predictor_list)
AIC_list = c()
for (i in 1:num_vars) {
predictor_list_tmp = predictor_list[-i]
entire_model = reformulate(termlabels = predictor_list_tmp, response = 'Y')
lm_model_tmp = lm(entire_model, data = df)
AIC = get_AIC(lm_model_tmp, df)
AIC_list = c(AIC_list, AIC)
}
return(AIC_list)
}
BIC_list_vardrop <- function(predictor_list, df) {
num_vars = length(predictor_list)
BIC_list = c()
for (i in 1:num_vars) {
predictor_list_tmp = predictor_list[-i]
entire_model = reformulate(termlabels = predictor_list_tmp, response = 'Y')
lm_model_tmp = lm(entire_model, data = df)
BIC = get_BIC(lm_model_tmp, df)
BIC_list = c(BIC_list, BIC)
}
return(BIC_list)
}
new_predictor_list <- function(predictor_list, AIC_list) {
min_index = which.min(AIC_list)
pred_list_new = predictor_list[-min_index]
return(pred_list_new)
}
get_n <- function(df) {
n = length(df$Y)
return(n)
}
get_AIC <- function(model, df) {
n = get_n(df)
p = get_p(model)
SSE_p = get_SSEp(model)
AIC = n*log(SSE_p) - n*log(n) + 2*p
return(AIC)
}
get_BIC <- function(model, df) {
n = get_n(df)
p = get_p(model)
SSE_p = get_SSEp(model)
BIC = n*log(SSE_p) - n*log(n) + p*log(n)
return(BIC)
}
get_p <- function(model) {
p = length(anova(model)["Sum Sq"]$"Sum Sq")-1
return(p)
}
get_SSEp <- function(model) {
SSE_p = anova(model)["Sum Sq"]["Residuals",]
return(SSE_p)
}
lm_pvalues <- function(lm_model) {
summary_model_coeff = summary(lm_model)$coefficients
pvalues = as.data.frame(summary_model_coeff[,4])
return(pvalues)
}
update_model <- function(predictor_list, row_index, df) {
predictor_list = predictor_list[-(row_index)]
entire_model = reformulate(termlabels = predictor_list, response = 'Y')
lm_model_new = lm(entire_model, data = df)
return(lm_model_new)
}
update_pred_list <- function(predictor_list, row_index) {
predictor_list_new = predictor_list[-(row_index-1)]
return(predictor_list_new)
}
msan601backwardStepwise(df)
str(df)
str(data)
setwd("/Users/htom/Desktop/Backup/MSAN_Fall_2015/Data_Acq/Reddit_project/Analysis")
library(ggplot2)
library(car)
library(MASS)
library(hexbin)
data1 = read.csv("subreddit.csv", header = F)
V1_table <- table(data1$V1)
V1_levels <- names(V1_table)[order(-1*V1_table)]
data1$V1order <- factor(data1$V1, levels = V1_levels)
# Just to be clear, the above line is no different than:
# mtcars$cyl2 <- factor(mtcars$cyl, levels = c("6","4","8"))
# You can manually set the levels in whatever order you please.
ggplot(data1, aes(x = V1order)) +
geom_bar(color = "blue", fill = "lightblue2") +
stat_bin(aes(y=..count.., label=..count..), geom="text", hjust = -0.5) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
theme(plot.title = element_text(size=30,lineheight=.8,
vjust=1)) +
xlab("Subreddit") +
ylab("Count") +
ggtitle("Most Popular Subreddit on Front Page") +
coord_flip() +
theme(axis.text.x=element_text(colour="black"), axis.text.y=element_text(colour="black")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
data = read.csv("length_upvotes.csv", header = F)
data_subset = subset(data, V2 > 0)
with(data_subset,
smoothScatter(log(V1), log(V2), main="Scatterplot Colored by Smoothed Densities",
xlab = "Log of Number of Characters",
ylab = "Log of Upvotes"))
scatterplot(log(V2)~log(V1), data = data,
boxplot = F, spread = F, smooth = F,
xlab = "Length of Comment (Characters)", ylab = "Upvotes", main = "Comments")
ggplot(data_subset,aes(x=(V1),y=(V2))) + stat_binhex()
ggplot(data_subset,aes(x=log(V1),y=(V2))) + geom_point(alpha = 0.1)
ggplot(data, aes(x=log(V1), y=V2)) +
geom_point(aes(size=V3), fill = NA, shape = 1) +
scale_size_continuous(range=c(2,15)) +
theme(legend.position = "none")
ggplot(data_subset,aes(log(data_subset$V1))) +
geom_histogram(binwidth = 0.40, aes(y = ..density..), color = "blue", fill = "lightblue") +
geom_density(color="blue") +
xlab("Log of Number of Characters") +
ylab("Density") +
ggtitle("Distribution of Most Common Length of Comment") +
theme(axis.text.x=element_text(colour="black"), axis.text.y=element_text(colour="black")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
